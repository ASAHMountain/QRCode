<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\Output\YH-F429.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\Output\YH-F429.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Feb 12 11:43:41 2020
<BR><P>
<H3>Maximum Stack Usage =       3196 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; QR_decoder &rArr; zbar_scan_image &rArr; _zbar_qr_decode &rArr; qr_reader_match_centers &rArr;  qr_reader_match_centers (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ADC_IRQHandler</a><BR>
 <LI><a href="#[6]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">BusFault_Handler</a><BR>
 <LI><a href="#[4]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">HardFault_Handler</a><BR>
 <LI><a href="#[5]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">UsageFault_Handler</a><BR>
 <LI><a href="#[145]">_zbar_symbol_refcnt</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[145]">_zbar_symbol_refcnt</a><BR>
 <LI><a href="#[133]">_zbar_image_scanner_recycle_syms</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[133]">_zbar_image_scanner_recycle_syms</a><BR>
 <LI><a href="#[140]">qr_reader_match_centers</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[140]">qr_reader_match_centers</a><BR>
 <LI><a href="#[79]">qsort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[79]">qsort</a><BR>
 <LI><a href="#[170]">rs_quartic_solve</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[170]">rs_quartic_solve</a><BR>
 <LI><a href="#[183]">zbar_decoder_set_config</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[183]">zbar_decoder_set_config</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[20]">CAN1_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[21]">CAN1_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[22]">CAN1_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1f]">CAN1_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4c]">CAN2_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4d]">CAN2_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4e]">CAN2_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4b]">CAN2_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[69]">DCMI_DMAError</a> from stm32f4xx_hal_dcmi.o(i.DCMI_DMAError) referenced from stm32f4xx_hal_dcmi.o(i.HAL_DCMI_IRQHandler)
 <LI><a href="#[69]">DCMI_DMAError</a> from stm32f4xx_hal_dcmi.o(i.DCMI_DMAError) referenced from stm32f4xx_hal_dcmi.o(i.HAL_DCMI_Start_DMA)
 <LI><a href="#[6a]">DCMI_DMAXferCplt</a> from stm32f4xx_hal_dcmi.o(i.DCMI_DMAXferCplt) referenced from stm32f4xx_hal_dcmi.o(i.HAL_DCMI_Start_DMA)
 <LI><a href="#[5a]">DCMI_IRQHandler</a> from stm32f4xx_it.o(i.DCMI_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[65]">DMA2D_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream1_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[49]">ETH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4a]">ETH_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[34]">EXTI15_10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[23]">EXTI9_5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[10]">FLASH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3c]">FMC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5c]">FPU_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5b]">HASH_RNG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2e]">I2C2_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2d]">I2C2_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[55]">I2C3_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[54]">I2C3_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[64]">LTDC_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[63]">LTDC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4f]">OTG_FS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[36]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[59]">OTG_HS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[d]">PVD_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[11]">RCC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[35]">RTC_Alarm_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[f]">RTC_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[62]">SAI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3d]">SDIO_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[30]">SPI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3f]">SPI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5f]">SPI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[60]">SPI5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[61]">SPI6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[67]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[e]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[24]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[27]">TIM1_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[26]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[25]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[28]">TIM2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[29]">TIM3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2a]">TIM4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3e]">TIM5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[42]">TIM6_DAC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[43]">TIM7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[37]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3a]">TIM8_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[39]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[38]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[40]">UART4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[41]">UART5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5d]">UART7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5e]">UART8_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[31]">USART1_IRQHandler</a> from bsp_debug_usart.o(i.USART1_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[32]">USART2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[33]">USART3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[53]">USART6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[c]">WWDG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[68]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[6d]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[6c]">fputc</a> from bsp_debug_usart.o(i.fputc) referenced from printf8.o(i.__0fprintf$8)
 <LI><a href="#[6c]">fputc</a> from bsp_debug_usart.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[66]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[70]">qr_cmp_edge_pt</a> from qrdec.o(i.qr_cmp_edge_pt) referenced from qrdec.o(i.qr_finder_edge_pts_aff_classify)
 <LI><a href="#[70]">qr_cmp_edge_pt</a> from qrdec.o(i.qr_cmp_edge_pt) referenced from qrdec.o(i.qr_finder_edge_pts_hom_classify)
 <LI><a href="#[6f]">qr_finder_center_cmp</a> from qrdec.o(i.qr_finder_center_cmp) referenced from qrdec.o(i._zbar_qr_decode)
 <LI><a href="#[6e]">qr_finder_vline_cmp</a> from qrdec.o(i.qr_finder_vline_cmp) referenced from qrdec.o(i._zbar_qr_decode)
 <LI><a href="#[71]">symbol_handler</a> from img_scanner.o(i.symbol_handler) referenced from img_scanner.o(i.zbar_image_scanner_create)
 <LI><a href="#[72]">zbar_image_free_data</a> from image.o(i.zbar_image_free_data) referenced from image.o(i.zbar_image_free_data)
 <LI><a href="#[72]">zbar_image_free_data</a> from image.o(i.zbar_image_free_data) referenced from image.o(i.zbar_image_set_data)
 <LI><a href="#[6b]">zbar_img_cleanup</a> from qr_decoder_user.o(i.zbar_img_cleanup) referenced from qr_decoder_user.o(i.QR_decoder)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[68]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[18f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[73]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[190]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[191]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[192]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[193]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[194]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
</UL>

<P><STRONG><a name="[166]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_cell_init
</UL>

<P><STRONG><a name="[195]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>qsort</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, qsort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = qsort &rArr;  qsort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_edge_pts_hom_classify
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_edge_pts_aff_classify
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_decode
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>

<P><STRONG><a name="[196]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_correct
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_list_extract_text
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_add_sym
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_image
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_free_data
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_set_data
</UL>

<P><STRONG><a name="[128]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postprocess_c
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_correct
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_decode
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_code128
</UL>

<P><STRONG><a name="[197]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_sample
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_correct
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isaac_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_reset
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[110]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decoder
</UL>

<P><STRONG><a name="[132]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_add_sym
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
</UL>

<P><STRONG><a name="[7d]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_list_extract_text
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_cluster_lines
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_set_create
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_decode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_create
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_alloc_sym
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_free_data
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_create
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_set_data
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_create
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_create
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[19c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[19d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[19e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>BEEP_GPIO_Config</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, bsp_beep.o(i.BEEP_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BEEP_GPIO_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14e]"></a>BEEP_Handler</STRONG> (Thumb, 144 bytes, Stack size 28 bytes, bsp_beep.o(i.BEEP_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BEEP_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DCMI_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DCMI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = DCMI_IRQHandler &rArr; HAL_DCMI_IRQHandler &rArr; HAL_DCMI_VsyncEventCallback &rArr; LCD_Line_Scan &rArr; LCD_FillRect &rArr; LL_FillBuffer &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>DEBUG_USART_Config</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, bsp_debug_usart.o(i.DEBUG_USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DEBUG_USART_Config &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[cd]"></a>FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_ProgramRefreshRate))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[8d]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[cb]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[8f]"></a>GetGBKCode_from_EXFlash</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp_lcd.o(i.GetGBKCode_from_EXFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GetGBKCode_from_EXFlash &rArr; SPI_FLASH_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispChar_CH
</UL>

<P><STRONG><a name="[83]"></a>HAL_DCMI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_dcmi.o(i.HAL_DCMI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_DMAError
</UL>

<P><STRONG><a name="[95]"></a>HAL_DCMI_FrameEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_dcmi.o(i.HAL_DCMI_FrameEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>HAL_DCMI_IRQHandler</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32f4xx_hal_dcmi.o(i.HAL_DCMI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = HAL_DCMI_IRQHandler &rArr; HAL_DCMI_VsyncEventCallback &rArr; LCD_Line_Scan &rArr; LCD_FillRect &rArr; LL_FillBuffer &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_LineEventCallback
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_FrameEventCallback
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_VsyncEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>HAL_DCMI_Init</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, stm32f4xx_hal_dcmi_ex.o(i.HAL_DCMI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DCMI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[93]"></a>HAL_DCMI_LineEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_dcmi.o(i.HAL_DCMI_LineEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>HAL_DCMI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_dcmi.o(i.HAL_DCMI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Init
</UL>

<P><STRONG><a name="[9e]"></a>HAL_DCMI_Resume</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_dcmi.o(i.HAL_DCMI_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_VsyncEventCallback
</UL>

<P><STRONG><a name="[98]"></a>HAL_DCMI_Start_DMA</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, stm32f4xx_hal_dcmi.o(i.HAL_DCMI_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_DCMI_Start_DMA &rArr; HAL_DMAEx_MultiBufferStart_IT &rArr; DMA_MultiBufferSetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMAEx_MultiBufferStart_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_DMA_Config
</UL>

<P><STRONG><a name="[9b]"></a>HAL_DCMI_Suspend</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, stm32f4xx_hal_dcmi.o(i.HAL_DCMI_Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_DCMI_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_VsyncEventCallback
</UL>

<P><STRONG><a name="[94]"></a>HAL_DCMI_VsyncEventCallback</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bsp_ov5640.o(i.HAL_DCMI_VsyncEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = HAL_DCMI_VsyncEventCallback &rArr; LCD_Line_Scan &rArr; LCD_FillRect &rArr; LL_FillBuffer &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Suspend
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Resume
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_image
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Line_Scan
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_DMA_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>HAL_DMA2D_ConfigLayer</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, stm32f4xx_hal_dma2d.o(i.HAL_DMA2D_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FillBuffer
</UL>

<P><STRONG><a name="[a0]"></a>HAL_DMA2D_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_dma2d.o(i.HAL_DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA2D_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FillBuffer
</UL>

<P><STRONG><a name="[a1]"></a>HAL_DMA2D_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_dma2d.o(i.HAL_DMA2D_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
</UL>

<P><STRONG><a name="[a2]"></a>HAL_DMA2D_PollForTransfer</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, stm32f4xx_hal_dma2d.o(i.HAL_DMA2D_PollForTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA2D_PollForTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FillBuffer
</UL>

<P><STRONG><a name="[a3]"></a>HAL_DMA2D_Start</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_dma2d.o(i.HAL_DMA2D_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FillBuffer
</UL>

<P><STRONG><a name="[84]"></a>HAL_DMAEx_ChangeMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_dma_ex.o(i.HAL_DMAEx_ChangeMemory))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_DMAXferCplt
</UL>

<P><STRONG><a name="[9a]"></a>HAL_DMAEx_MultiBufferStart_IT</STRONG> (Thumb, 2814 bytes, Stack size 40 bytes, stm32f4xx_hal_dma_ex.o(i.HAL_DMAEx_MultiBufferStart_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_DMAEx_MultiBufferStart_IT &rArr; DMA_MultiBufferSetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_MultiBufferSetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Start_DMA
</UL>

<P><STRONG><a name="[92]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 460 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>HAL_DMA_Init</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_DMA_Config
</UL>

<P><STRONG><a name="[99]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Start_DMA
</UL>

<P><STRONG><a name="[aa]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_RGB565Config
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_HW_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_FOCUS_AD5820_Constant_Focus
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_FOCUS_AD5820_Init
</UL>

<P><STRONG><a name="[81]"></a>HAL_GPIO_Init</STRONG> (Thumb, 426 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_GPIO_Config
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_HW_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMaster_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_USART_Config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_GPIO_Config
</UL>

<P><STRONG><a name="[82]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_HW_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOn
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_GPIO_Config
</UL>

<P><STRONG><a name="[8e]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_PollForTransfer
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMaster_Init
</UL>

<P><STRONG><a name="[ab]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>

<P><STRONG><a name="[d6]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMaster_Init
</UL>

<P><STRONG><a name="[ad]"></a>HAL_I2C_Init</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_I2C_Init &rArr; HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMaster_Init
</UL>

<P><STRONG><a name="[b0]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 666 bytes, Stack size 64 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_ReadReg
</UL>

<P><STRONG><a name="[b4]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 342 bytes, Stack size 64 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteFW
</UL>

<P><STRONG><a name="[ac]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[ae]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[11b]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b8]"></a>HAL_InitTick</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[ba]"></a>HAL_LTDC_ConfigLayer</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LayerInit
</UL>

<P><STRONG><a name="[bd]"></a>HAL_LTDC_Init</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_LTDC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[be]"></a>HAL_LTDC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
</UL>

<P><STRONG><a name="[bf]"></a>HAL_LTDC_SetAlpha</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_SetAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_LTDC_SetAlpha &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTransparency
</UL>

<P><STRONG><a name="[89]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_USART_Config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_DMA_Config
</UL>

<P><STRONG><a name="[88]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_USART_Config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_DMA_Config
</UL>

<P><STRONG><a name="[c1]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, stm32f4xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c2]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 546 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[c3]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c5]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[af]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c6]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c4]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[c7]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 896 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c8]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f4xx_hal_sdram.o(i.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_SDRAM_Init &rArr; FMC_SDRAM_Timing_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
</UL>

<P><STRONG><a name="[c9]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sdram.o(i.HAL_SDRAM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[cc]"></a>HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_sdram.o(i.HAL_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_InitSequence
</UL>

<P><STRONG><a name="[ce]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_hal_sdram.o(i.HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_InitSequence
</UL>

<P><STRONG><a name="[cf]"></a>HAL_SPI_Init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[d0]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, bsp_spi_flash.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[b9]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[87]"></a>HAL_UART_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_USART_Config
</UL>

<P><STRONG><a name="[d1]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d3]"></a>HAL_UART_Transmit</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>I2CMaster_Init</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, bsp_i2c.o(i.I2CMaster_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2CMaster_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>LCD_Clear</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_lcd.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LCD_Clear &rArr; LL_FillBuffer &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FillBuffer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>LCD_ClearLine</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bsp_lcd.o(i.LCD_ClearLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = LCD_ClearLine &rArr; LCD_FillRect &rArr; LL_FillBuffer &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>LCD_DisplayChar</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_lcd.o(i.LCD_DisplayChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_DisplayChar &rArr; DrawChar &rArr; LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine_EN_CH
</UL>

<P><STRONG><a name="[e4]"></a>LCD_DisplayOn</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_lcd.o(i.LCD_DisplayOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_DisplayOn
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>LCD_DisplayStringLine_EN_CH</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, bsp_lcd.o(i.LCD_DisplayStringLine_EN_CH))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = LCD_DisplayStringLine_EN_CH &rArr; LCD_DispChar_CH &rArr; GetGBKCode_from_EXFlash &rArr; SPI_FLASH_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetFont
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayChar
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispChar_CH
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>LCD_DrawHLine</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, bsp_lcd.o(i.LCD_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LCD_DrawHLine &rArr; LL_FillBuffer &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FillBuffer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
</UL>

<P><STRONG><a name="[8c]"></a>LCD_DrawPixel</STRONG> (Thumb, 238 bytes, Stack size 20 bytes, bsp_lcd.o(i.LCD_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispChar_CH
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawChar
</UL>

<P><STRONG><a name="[e8]"></a>LCD_DrawRect</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bsp_lcd.o(i.LCD_DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = LCD_DrawRect &rArr; LCD_DrawVLine &rArr; LL_FillBuffer &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Open_QR_Window
</UL>

<P><STRONG><a name="[e9]"></a>LCD_DrawVLine</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, bsp_lcd.o(i.LCD_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LCD_DrawVLine &rArr; LL_FillBuffer &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FillBuffer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
</UL>

<P><STRONG><a name="[e0]"></a>LCD_FillRect</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, bsp_lcd.o(i.LCD_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = LCD_FillRect &rArr; LL_FillBuffer &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FillBuffer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Open_QR_Window
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearLine
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Line_Scan
</UL>

<P><STRONG><a name="[e6]"></a>LCD_GetFont</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_lcd.o(i.LCD_GetFont))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine_EN_CH
</UL>

<P><STRONG><a name="[dd]"></a>LCD_GetXSize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_lcd.o(i.LCD_GetXSize))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Open_QR_Window
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LayerInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearLine
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>LCD_GetYSize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_lcd.o(i.LCD_GetYSize))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Open_QR_Window
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LayerInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>LCD_Init</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, bsp_lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LCD_Init &rArr; SDRAM_Init &rArr; SDRAM_GPIO_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>LCD_LayerInit</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, bsp_lcd.o(i.LCD_LayerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = LCD_LayerInit &rArr; HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>LCD_Line_Scan</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, qr_decoder_user.o(i.LCD_Line_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = LCD_Line_Scan &rArr; LCD_FillRect &rArr; LL_FillBuffer &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_VsyncEventCallback
</UL>

<P><STRONG><a name="[f0]"></a>LCD_Open_QR_Window</STRONG> (Thumb, 406 bytes, Stack size 16 bytes, qr_decoder_user.o(i.LCD_Open_QR_Window))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = LCD_Open_QR_Window &rArr; LCD_DrawRect &rArr; LCD_DrawVLine &rArr; LL_FillBuffer &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColors
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLayer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>LCD_SelectLayer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_lcd.o(i.LCD_SelectLayer))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Open_QR_Window
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Line_Scan
</UL>

<P><STRONG><a name="[f2]"></a>LCD_SetBackColor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_lcd.o(i.LCD_SetBackColor))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColors
</UL>

<P><STRONG><a name="[f1]"></a>LCD_SetColors</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, bsp_lcd.o(i.LCD_SetColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD_SetColors
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Open_QR_Window
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>LCD_SetFont</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_lcd.o(i.LCD_SetFont))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[e1]"></a>LCD_SetTextColor</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_lcd.o(i.LCD_SetTextColor))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColors
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Open_QR_Window
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearLine
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Line_Scan
</UL>

<P><STRONG><a name="[f3]"></a>LCD_SetTransparency</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_lcd.o(i.LCD_SetTransparency))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_SetTransparency &rArr; HAL_LTDC_SetAlpha &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAlpha
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>LED_GPIO_Config</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, bsp_led.o(i.LED_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LED_GPIO_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>OV5640_AUTO_FOCUS</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ov5640_af.o(i.OV5640_AUTO_FOCUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = OV5640_AUTO_FOCUS &rArr; OV5640_FOCUS_AD5820_Constant_Focus &rArr; OV5640_WriteReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_FOCUS_AD5820_Constant_Focus
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_FOCUS_AD5820_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>OV5640_DMA_Config</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, bsp_ov5640.o(i.OV5640_DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OV5640_DMA_Config &rArr; HAL_DCMI_Start_DMA &rArr; HAL_DMAEx_MultiBufferStart_IT &rArr; DMA_MultiBufferSetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Start_DMA
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_VsyncEventCallback
</UL>

<P><STRONG><a name="[f8]"></a>OV5640_FOCUS_AD5820_Constant_Focus</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, ov5640_af.o(i.OV5640_FOCUS_AD5820_Constant_Focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OV5640_FOCUS_AD5820_Constant_Focus &rArr; OV5640_WriteReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_ReadReg
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_AUTO_FOCUS
</UL>

<P><STRONG><a name="[fd]"></a>OV5640_HW_Init</STRONG> (Thumb, 482 bytes, Stack size 56 bytes, bsp_ov5640.o(i.OV5640_HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OV5640_HW_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe]"></a>OV5640_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, bsp_ov5640.o(i.OV5640_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OV5640_Init &rArr; OV5640_DMA_Config &rArr; HAL_DCMI_Start_DMA &rArr; HAL_DMAEx_MultiBufferStart_IT &rArr; DMA_MultiBufferSetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_DMA_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>OV5640_RGB565Config</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bsp_ov5640.o(i.OV5640_RGB565Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OV5640_RGB565Config &rArr; OV5640_Reset &rArr; OV5640_WriteReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Reset
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_ReadReg
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>OV5640_ReadID</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_ov5640.o(i.OV5640_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OV5640_ReadID &rArr; OV5640_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>OV5640_ReadReg</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bsp_i2c.o(i.OV5640_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OV5640_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_ReadID
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_RGB565Config
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_FOCUS_AD5820_Constant_Focus
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_FOCUS_AD5820_Init
</UL>

<P><STRONG><a name="[100]"></a>OV5640_Reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_ov5640.o(i.OV5640_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OV5640_Reset &rArr; OV5640_WriteReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_RGB565Config
</UL>

<P><STRONG><a name="[fc]"></a>OV5640_WriteFW</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, bsp_i2c.o(i.OV5640_WriteFW))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OV5640_WriteFW &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_FOCUS_AD5820_Init
</UL>

<P><STRONG><a name="[f9]"></a>OV5640_WriteReg</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, bsp_i2c.o(i.OV5640_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OV5640_WriteReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_RGB565Config
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_FOCUS_AD5820_Constant_Focus
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_FOCUS_AD5820_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Reset
</UL>

<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>QR_decoder</STRONG> (Thumb, 442 bytes, Stack size 56 bytes, qr_decoder_user.o(i.QR_decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 2668<LI>Call Chain = QR_decoder &rArr; zbar_scan_image &rArr; _zbar_qr_decode &rArr; qr_reader_match_centers &rArr;  qr_reader_match_centers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_symbol_next
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_symbol_get_type
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_symbol_get_data_length
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_symbol_get_data
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_set_userdata
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_set_size
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_set_format
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_set_data
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_set_config
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_destroy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_create
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_first_symbol
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_destroy
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_create
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_get_symbol_name
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb565_to_y
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_fourcc_parse
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>SDRAM_Init</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, bsp_sdram.o(i.SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SDRAM_Init &rArr; SDRAM_GPIO_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_InitSequence
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[91]"></a>SPI_FLASH_BufferRead</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, bsp_spi_flash.o(i.SPI_FLASH_BufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGBKCode_from_EXFlash
</UL>

<P><STRONG><a name="[90]"></a>SPI_FLASH_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bsp_spi_flash.o(i.SPI_FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI_FLASH_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGBKCode_from_EXFlash
</UL>

<P><STRONG><a name="[119]"></a>SPI_FLASH_SendByte</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bsp_spi_flash.o(i.SPI_FLASH_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TIMEOUT_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
</UL>

<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>USART1_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bsp_debug_usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[11d]"></a>__0fprintf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a1]"></a>__1fprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8), UNUSED)

<P><STRONG><a name="[13e]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_destroy
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_decode
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_destroy
</UL>

<P><STRONG><a name="[11f]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a2]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[fb]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TIMEOUT_UserCallback
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_RGB565Config
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_FOCUS_AD5820_Constant_Focus
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_FOCUS_AD5820_Init
</UL>

<P><STRONG><a name="[120]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a3]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[151]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_list_extract_text
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_binarize
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_finder_pair
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_finder_edge
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_cluster_lines
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_decode
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_refcnt
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_destroy
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_set_free
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_destroy
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_decode
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_recycle_syms
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_alloc_sym
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_symbol_set_ref
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_free_data
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_destroy
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_set_data
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_destroy
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_destroy
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_free
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[7e]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_list_extract_text
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_binarize
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_finder_pair
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_finder_edge
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_decode
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_parse
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_create
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_decode
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_alloc_sym
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_create
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[1a4]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1a5]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1a6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[124]"></a>_zbar_decode_codabar</STRONG> (Thumb, 1476 bytes, Stack size 40 bytes, codabar.o(i._zbar_decode_codabar))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _zbar_decode_codabar &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codabar_decode_start
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decode_width
</UL>

<P><STRONG><a name="[127]"></a>_zbar_decode_code128</STRONG> (Thumb, 2310 bytes, Stack size 112 bytes, code128.o(i._zbar_decode_code128))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _zbar_decode_code128 &rArr; postprocess_c &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postprocess_c
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decode_width
</UL>

<P><STRONG><a name="[12a]"></a>_zbar_decode_code39</STRONG> (Thumb, 638 bytes, Stack size 32 bytes, code39.o(i._zbar_decode_code39))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _zbar_decode_code39 &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code39_decode9
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decode_width
</UL>

<P><STRONG><a name="[12c]"></a>_zbar_decode_code93</STRONG> (Thumb, 1412 bytes, Stack size 48 bytes, code93.o(i._zbar_decode_code93))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _zbar_decode_code93 &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decode_width
</UL>

<P><STRONG><a name="[12d]"></a>_zbar_decode_databar</STRONG> (Thumb, 1190 bytes, Stack size 48 bytes, databar.o(i._zbar_decode_databar))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = _zbar_decode_databar &rArr; decode_char &rArr; match_segment
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_char
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decode_width
</UL>

<P><STRONG><a name="[17f]"></a>_zbar_decode_ean</STRONG> (Thumb, 3720 bytes, Stack size 48 bytes, ean.o(i._zbar_decode_ean))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _zbar_decode_ean
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decode_width
</UL>

<P><STRONG><a name="[12f]"></a>_zbar_decode_i25</STRONG> (Thumb, 1188 bytes, Stack size 40 bytes, i25.o(i._zbar_decode_i25))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _zbar_decode_i25 &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decode_width
</UL>

<P><STRONG><a name="[130]"></a>_zbar_decode_pdf417</STRONG> (Thumb, 570 bytes, Stack size 40 bytes, pdf417.o(i._zbar_decode_pdf417))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _zbar_decode_pdf417 &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decode_width
</UL>

<P><STRONG><a name="[177]"></a>_zbar_decoder_get_qr_finder_line</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qr_finder.o(i._zbar_decoder_get_qr_finder_line))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
</UL>

<P><STRONG><a name="[17e]"></a>_zbar_find_qr</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, qr_finder.o(i._zbar_find_qr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _zbar_find_qr
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decode_width
</UL>

<P><STRONG><a name="[136]"></a>_zbar_get_symbol_hash</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, symbol.o(i._zbar_get_symbol_hash))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_add_sym
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_set_config
</UL>

<P><STRONG><a name="[131]"></a>_zbar_image_scanner_add_sym</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, img_scanner.o(i._zbar_image_scanner_add_sym))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _zbar_image_scanner_add_sym &rArr; _zbar_image_scanner_alloc_sym &rArr; calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_get_symbol_hash
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_recycle_syms
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_alloc_sym
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_list_extract_text
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
</UL>

<P><STRONG><a name="[134]"></a>_zbar_image_scanner_alloc_sym</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, img_scanner.o(i._zbar_image_scanner_alloc_sym))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _zbar_image_scanner_alloc_sym &rArr; calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_list_extract_text
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_add_sym
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
</UL>

<P><STRONG><a name="[133]"></a>_zbar_image_scanner_recycle_syms</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, img_scanner.o(i._zbar_image_scanner_recycle_syms))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + In Cycle
<LI>Call Chain = _zbar_image_scanner_recycle_syms &rArr;  _zbar_image_scanner_recycle_syms (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_set_free
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_recycle_syms
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_recycle_syms
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_add_sym
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
</UL>

<P><STRONG><a name="[139]"></a>_zbar_qr_create</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, qrdec.o(i._zbar_qr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _zbar_qr_create &rArr; isaac_init &rArr; isaac_update
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_gf256_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isaac_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_create
</UL>

<P><STRONG><a name="[13c]"></a>_zbar_qr_decode</STRONG> (Thumb, 1506 bytes, Stack size 176 bytes, qrdec.o(i._zbar_qr_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 2540<LI>Call Chain = _zbar_qr_decode &rArr; qr_reader_match_centers &rArr;  qr_reader_match_centers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_list_extract_text
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_binarize
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_cluster_lines
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
</UL>

<P><STRONG><a name="[142]"></a>_zbar_qr_destroy</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, qrdec.o(i._zbar_qr_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _zbar_qr_destroy &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_destroy
</UL>

<P><STRONG><a name="[143]"></a>_zbar_qr_found_line</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, qrdec.o(i._zbar_qr_found_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _zbar_qr_found_line &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
</UL>

<P><STRONG><a name="[18a]"></a>_zbar_qr_reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, qrdec.o(i._zbar_qr_reset))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
</UL>

<P><STRONG><a name="[184]"></a>_zbar_refcnt_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, refcnt.o(i._zbar_refcnt_init))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_free_data
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_set_data
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_create
</UL>

<P><STRONG><a name="[144]"></a>_zbar_symbol_free</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, symbol.o(i._zbar_symbol_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _zbar_symbol_free &rArr; _zbar_symbol_refcnt &rArr;  _zbar_symbol_refcnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_refcnt
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_destroy
</UL>

<P><STRONG><a name="[146]"></a>_zbar_symbol_set_create</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, symbol.o(i._zbar_symbol_set_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _zbar_symbol_set_create &rArr; calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
</UL>

<P><STRONG><a name="[138]"></a>_zbar_symbol_set_free</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, symbol.o(i._zbar_symbol_set_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _zbar_symbol_set_free &rArr; _zbar_symbol_refcnt &rArr;  _zbar_symbol_refcnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_refcnt
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_recycle_syms
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_destroy
</UL>

<P><STRONG><a name="[161]"></a>bch15_5_correct</STRONG> (Thumb, 764 bytes, Stack size 56 bytes, bch15_5.o(i.bch15_5_correct))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bch15_5_correct
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_fmt_info_decode
</UL>

<P><STRONG><a name="[6c]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bsp_debug_usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printf8.o(i.__0fprintf$8)
<LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[9c]"></a>get_image</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, qr_decoder_user.o(i.get_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_image &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_VsyncEventCallback
</UL>

<P><STRONG><a name="[150]"></a>get_send_sta</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_debug_usart.o(i.get_send_sta))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>isaac_init</STRONG> (Thumb, 918 bytes, Stack size 72 bytes, isaac.o(i.isaac_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = isaac_init &rArr; isaac_update
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isaac_update
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_create
</UL>

<P><STRONG><a name="[14d]"></a>isaac_next_uint</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, isaac.o(i.isaac_next_uint))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = isaac_next_uint &rArr; isaac_update
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isaac_update
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_ransac
</UL>

<P><STRONG><a name="[66]"></a>main</STRONG> (Thumb, 496 bytes, Stack size 528 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 3196<LI>Call Chain = main &rArr; QR_decoder &rArr; zbar_scan_image &rArr; _zbar_qr_decode &rArr; qr_reader_match_centers &rArr;  qr_reader_match_centers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_buf
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_send_sta
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decoder
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_ReadID
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_RGB565Config
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_HW_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_AUTO_FOCUS
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTransparency
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColors
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLayer
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Open_QR_Window
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LayerInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine_EN_CH
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOn
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearLine
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMaster_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_USART_Config
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Handler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_GPIO_Config
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[13f]"></a>qr_binarize</STRONG> (Thumb, 904 bytes, Stack size 136 bytes, binarize.o(i.qr_binarize))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = qr_binarize &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_decode
</UL>

<P><STRONG><a name="[141]"></a>qr_code_data_list_extract_text</STRONG> (Thumb, 454 bytes, Stack size 72 bytes, qrdectxt.o(i.qr_code_data_list_extract_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = qr_code_data_list_extract_text &rArr; _zbar_image_scanner_add_sym &rArr; _zbar_image_scanner_alloc_sym &rArr; calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_alloc_sym
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_add_sym
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_decode
</UL>

<P><STRONG><a name="[16c]"></a>qr_ihypot</STRONG> (Thumb, 276 bytes, Stack size 20 bytes, util.o(i.qr_ihypot))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = qr_ihypot
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_points
</UL>

<P><STRONG><a name="[153]"></a>qr_ilog</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, util.o(i.qr_ilog))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_points
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_cell_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_aff_line_step
</UL>

<P><STRONG><a name="[163]"></a>qr_isqrt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, util.o(i.qr_isqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qr_isqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_ransac
</UL>

<P><STRONG><a name="[140]"></a>qr_reader_match_centers</STRONG> (Thumb, 2298 bytes, Stack size 624 bytes, qrdec.o(i.qr_reader_match_centers))
<BR><BR>[Stack]<UL><LI>Max Depth = 2364 + In Cycle
<LI>Call Chain = qr_reader_match_centers &rArr;  qr_reader_match_centers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_ilog
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_unproject
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_version_decode
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_fmt_info_decode
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_estimate_module_size_and_version
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_edge_pts_hom_classify
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_edge_pts_aff_classify
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_decode
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_decode
</UL>

<P><STRONG><a name="[126]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;databar_postprocess_exp
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postprocess_c
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_list_extract_text
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_parse
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_found_line
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_pdf417
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_i25
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_databar
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_code93
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_code39
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_code128
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_codabar
</UL>

<P><STRONG><a name="[105]"></a>rgb565_to_y</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, qr_decoder_user.o(i.rgb565_to_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rgb565_to_y
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decoder
</UL>

<P><STRONG><a name="[15c]"></a>rs_correct</STRONG> (Thumb, 1102 bytes, Stack size 1400 bytes, rs.o(i.rs_correct))
<BR><BR>[Stack]<UL><LI>Max Depth = 1508<LI>Call Chain = rs_correct &rArr; rs_quartic_solve &rArr;  rs_quartic_solve (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quartic_solve
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_decode
</UL>

<P><STRONG><a name="[13b]"></a>rs_gf256_init</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, rs.o(i.rs_gf256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rs_gf256_init
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_create
</UL>

<P><STRONG><a name="[14f]"></a>uart_send_buf</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, bsp_debug_usart.o(i.uart_send_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart_send_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17d]"></a>zbar_decode_width</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, decoder.o(i.zbar_decode_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = zbar_decode_width &rArr; _zbar_decode_databar &rArr; decode_char &rArr; match_segment
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_find_qr
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_pdf417
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_i25
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_ean
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_databar
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_code93
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_code39
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_code128
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_codabar
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_new_scan
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_flush
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_y
</UL>

<P><STRONG><a name="[180]"></a>zbar_decoder_create</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, decoder.o(i.zbar_decoder_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = zbar_decoder_create &rArr; calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_reset
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_create
</UL>

<P><STRONG><a name="[182]"></a>zbar_decoder_destroy</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, decoder.o(i.zbar_decoder_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = zbar_decoder_destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_destroy
</UL>

<P><STRONG><a name="[17a]"></a>zbar_decoder_get_configs</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, decoder.o(i.zbar_decoder_get_configs))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
</UL>

<P><STRONG><a name="[178]"></a>zbar_decoder_get_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, decoder.o(i.zbar_decoder_get_data))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
</UL>

<P><STRONG><a name="[179]"></a>zbar_decoder_get_data_length</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, decoder.o(i.zbar_decoder_get_data_length))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
</UL>

<P><STRONG><a name="[17c]"></a>zbar_decoder_get_direction</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, decoder.o(i.zbar_decoder_get_direction))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
</UL>

<P><STRONG><a name="[17b]"></a>zbar_decoder_get_modifiers</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, decoder.o(i.zbar_decoder_get_modifiers))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
</UL>

<P><STRONG><a name="[174]"></a>zbar_decoder_get_type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, decoder.o(i.zbar_decoder_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
</UL>

<P><STRONG><a name="[173]"></a>zbar_decoder_get_userdata</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, decoder.o(i.zbar_decoder_get_userdata))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
</UL>

<P><STRONG><a name="[18e]"></a>zbar_decoder_new_scan</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, decoder.o(i.zbar_decoder_new_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = zbar_decoder_new_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_new_scan
</UL>

<P><STRONG><a name="[181]"></a>zbar_decoder_reset</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, decoder.o(i.zbar_decoder_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = zbar_decoder_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_create
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_create
</UL>

<P><STRONG><a name="[183]"></a>zbar_decoder_set_config</STRONG> (Thumb, 402 bytes, Stack size 20 bytes, decoder.o(i.zbar_decoder_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + In Cycle
<LI>Call Chain = zbar_decoder_set_config &rArr;  zbar_decoder_set_config (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_set_config
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_set_config
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_set_config
</UL>

<P><STRONG><a name="[188]"></a>zbar_decoder_set_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, decoder.o(i.zbar_decoder_set_handler))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_create
</UL>

<P><STRONG><a name="[187]"></a>zbar_decoder_set_userdata</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, decoder.o(i.zbar_decoder_set_userdata))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_create
</UL>

<P><STRONG><a name="[10f]"></a>zbar_get_symbol_name</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, symbol.o(i.zbar_get_symbol_name))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decoder
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
</UL>

<P><STRONG><a name="[106]"></a>zbar_image_create</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, image.o(i.zbar_image_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = zbar_image_create &rArr; calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_refcnt_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decoder
</UL>

<P><STRONG><a name="[114]"></a>zbar_image_destroy</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, image.o(i.zbar_image_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = zbar_image_destroy &rArr; zbar_symbol_set_ref &rArr; _zbar_symbol_refcnt &rArr;  _zbar_symbol_refcnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_symbol_set_ref
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decoder
</UL>

<P><STRONG><a name="[10d]"></a>zbar_image_first_symbol</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, image.o(i.zbar_image_first_symbol))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decoder
</UL>

<P><STRONG><a name="[72]"></a>zbar_image_free_data</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, image.o(i.zbar_image_free_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = zbar_image_free_data &rArr; calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_refcnt_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 2]<UL><LI> image.o(i.zbar_image_free_data)
<LI> image.o(i.zbar_image_set_data)
</UL>
<P><STRONG><a name="[103]"></a>zbar_image_scanner_create</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, img_scanner.o(i.zbar_image_scanner_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = zbar_image_scanner_create &rArr; _zbar_qr_create &rArr; isaac_init &rArr; isaac_update
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_create
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_create
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_set_userdata
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_set_handler
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_create
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_set_config
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_destroy
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decoder
</UL>

<P><STRONG><a name="[115]"></a>zbar_image_scanner_destroy</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, img_scanner.o(i.zbar_image_scanner_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = zbar_image_scanner_destroy &rArr; _zbar_symbol_free &rArr; _zbar_symbol_refcnt &rArr;  _zbar_symbol_refcnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_destroy
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_set_free
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_destroy
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_symbol_set_ref
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_destroy
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_free
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decoder
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_create
</UL>

<P><STRONG><a name="[104]"></a>zbar_image_scanner_set_config</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, img_scanner.o(i.zbar_image_scanner_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = zbar_image_scanner_set_config &rArr; zbar_decoder_set_config &rArr;  zbar_decoder_set_config (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_get_symbol_hash
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_set_config
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decoder
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_create
</UL>

<P><STRONG><a name="[10b]"></a>zbar_image_set_data</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, image.o(i.zbar_image_set_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = zbar_image_set_data &rArr; calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_refcnt_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decoder
</UL>

<P><STRONG><a name="[108]"></a>zbar_image_set_format</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, image.o(i.zbar_image_set_format))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decoder
</UL>

<P><STRONG><a name="[10a]"></a>zbar_image_set_size</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, image.o(i.zbar_image_set_size))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decoder
</UL>

<P><STRONG><a name="[109]"></a>zbar_image_set_userdata</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, image.o(i.zbar_image_set_userdata))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decoder
</UL>

<P><STRONG><a name="[6b]"></a>zbar_img_cleanup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, qr_decoder_user.o(i.zbar_img_cleanup))
<BR>[Address Reference Count : 1]<UL><LI> qr_decoder_user.o(i.QR_decoder)
</UL>
<P><STRONG><a name="[10c]"></a>zbar_scan_image</STRONG> (Thumb, 1474 bytes, Stack size 72 bytes, img_scanner.o(i.zbar_scan_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 2612<LI>Call Chain = zbar_scan_image &rArr; _zbar_qr_decode &rArr; qr_reader_match_centers &rArr;  qr_reader_match_centers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_new_scan
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_flush
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_set_free
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_set_create
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_reset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_decode
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_recycle_syms
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_alloc_sym
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_add_sym
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_symbol_set_ref
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_y
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decoder
</UL>

<P><STRONG><a name="[18c]"></a>zbar_scan_y</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, scanner.o(i.zbar_scan_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = zbar_scan_y &rArr; zbar_decode_width &rArr; _zbar_decode_databar &rArr; decode_char &rArr; match_segment
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decode_width
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
</UL>

<P><STRONG><a name="[186]"></a>zbar_scanner_create</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, scanner.o(i.zbar_scanner_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = zbar_scanner_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_reset
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_create
</UL>

<P><STRONG><a name="[189]"></a>zbar_scanner_destroy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanner.o(i.zbar_scanner_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = zbar_scanner_destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_destroy
</UL>

<P><STRONG><a name="[18d]"></a>zbar_scanner_flush</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, scanner.o(i.zbar_scanner_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = zbar_scanner_flush &rArr; zbar_decode_width &rArr; _zbar_decode_databar &rArr; decode_char &rArr; match_segment
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decode_width
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
</UL>

<P><STRONG><a name="[176]"></a>zbar_scanner_get_edge</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanner.o(i.zbar_scanner_get_edge))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
</UL>

<P><STRONG><a name="[175]"></a>zbar_scanner_get_width</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanner.o(i.zbar_scanner_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbol_handler
</UL>

<P><STRONG><a name="[18b]"></a>zbar_scanner_new_scan</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, scanner.o(i.zbar_scanner_new_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = zbar_scanner_new_scan &rArr; zbar_decode_width &rArr; _zbar_decode_databar &rArr; decode_char &rArr; match_segment
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_new_scan
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decode_width
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
</UL>

<P><STRONG><a name="[111]"></a>zbar_symbol_get_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, symbol.o(i.zbar_symbol_get_data))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decoder
</UL>

<P><STRONG><a name="[112]"></a>zbar_symbol_get_data_length</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, symbol.o(i.zbar_symbol_get_data_length))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decoder
</UL>

<P><STRONG><a name="[10e]"></a>zbar_symbol_get_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, symbol.o(i.zbar_symbol_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decoder
</UL>

<P><STRONG><a name="[113]"></a>zbar_symbol_next</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, symbol.o(i.zbar_symbol_next))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decoder
</UL>

<P><STRONG><a name="[185]"></a>zbar_symbol_set_ref</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, symbol.o(i.zbar_symbol_set_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = zbar_symbol_set_ref &rArr; _zbar_symbol_refcnt &rArr;  _zbar_symbol_refcnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_refcnt
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scan_image
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_scanner_destroy
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_image_destroy
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c0]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[69]"></a>DCMI_DMAError</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_dcmi.o(i.DCMI_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCMI_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_dcmi.o(i.HAL_DCMI_IRQHandler)
<LI> stm32f4xx_hal_dcmi.o(i.HAL_DCMI_Start_DMA)
</UL>
<P><STRONG><a name="[6a]"></a>DCMI_DMAXferCplt</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32f4xx_hal_dcmi.o(i.DCMI_DMAXferCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCMI_DMAXferCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMAEx_ChangeMemory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_dcmi.o(i.HAL_DCMI_Start_DMA)
</UL>
<P><STRONG><a name="[a8]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[a7]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[a9]"></a>DMA_SetConfig</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[a5]"></a>DMA_MultiBufferSetConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_dma_ex.o(i.DMA_MultiBufferSetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_MultiBufferSetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMAEx_MultiBufferStart_IT
</UL>

<P><STRONG><a name="[a4]"></a>DMA2D_SetConfig</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32f4xx_hal_dma2d.o(i.DMA2D_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA2D_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Start
</UL>

<P><STRONG><a name="[d9]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[b2]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[b5]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[b7]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[b1]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[d8]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[b3]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[b6]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[bc]"></a>LTDC_SetConfig</STRONG> (Thumb, 350 bytes, Stack size 20 bytes, stm32f4xx_hal_ltdc.o(i.LTDC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAlpha
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[d2]"></a>UART_SetConfig</STRONG> (Thumb, 780 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d4]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[11c]"></a>SystemClock_Config</STRONG> (Thumb, 126 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>SDRAM_GPIO_Config</STRONG> (Thumb, 1150 bytes, Stack size 64 bytes, bsp_sdram.o(i.SDRAM_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDRAM_GPIO_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
</UL>

<P><STRONG><a name="[117]"></a>SDRAM_InitSequence</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, bsp_sdram.o(i.SDRAM_InitSequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDRAM_InitSequence &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
</UL>

<P><STRONG><a name="[118]"></a>SDRAM_delay</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, bsp_sdram.o(i.SDRAM_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDRAM_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_InitSequence
</UL>

<P><STRONG><a name="[11a]"></a>SPI_TIMEOUT_UserCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_spi_flash.o(i.SPI_TIMEOUT_UserCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[8b]"></a>DrawChar</STRONG> (Thumb, 264 bytes, Stack size 60 bytes, bsp_lcd.o(i.DrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DrawChar &rArr; LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayChar
</UL>

<P><STRONG><a name="[e2]"></a>LCD_DispChar_CH</STRONG> (Thumb, 186 bytes, Stack size 112 bytes, bsp_lcd.o(i.LCD_DispChar_CH))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LCD_DispChar_CH &rArr; GetGBKCode_from_EXFlash &rArr; SPI_FLASH_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGBKCode_from_EXFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine_EN_CH
</UL>

<P><STRONG><a name="[ea]"></a>LCD_GPIO_Config</STRONG> (Thumb, 948 bytes, Stack size 64 bytes, bsp_lcd.o(i.LCD_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_GPIO_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[de]"></a>LL_FillBuffer</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, bsp_lcd.o(i.LL_FillBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LL_FillBuffer &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Start
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_PollForTransfer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[da]"></a>I2Cx_Error</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_i2c.o(i.I2Cx_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2Cx_Error &rArr; I2CMaster_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMaster_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteFW
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_ReadReg
</UL>

<P><STRONG><a name="[f7]"></a>OV5640_FOCUS_AD5820_Init</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, ov5640_af.o(i.OV5640_FOCUS_AD5820_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OV5640_FOCUS_AD5820_Init &rArr; OV5640_WriteReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteFW
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_ReadReg
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_AUTO_FOCUS
</UL>

<P><STRONG><a name="[107]"></a>zbar_fourcc_parse</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, qr_decoder_user.o(i.zbar_fourcc_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = zbar_fourcc_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decoder
</UL>

<P><STRONG><a name="[71]"></a>symbol_handler</STRONG> (Thumb, 602 bytes, Stack size 56 bytes, img_scanner.o(i.symbol_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = symbol_handler &rArr; _zbar_image_scanner_add_sym &rArr; _zbar_image_scanner_alloc_sym &rArr; calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_get_width
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_scanner_get_edge
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_found_line
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decoder_get_qr_finder_line
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_alloc_sym
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_image_scanner_add_sym
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_get_userdata
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_get_type
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_get_modifiers
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_get_direction
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_get_data_length
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_get_data
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_decoder_get_configs
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_get_symbol_name
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> img_scanner.o(i.zbar_image_scanner_create)
</UL>
<P><STRONG><a name="[145]"></a>_zbar_symbol_refcnt</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, symbol.o(i._zbar_symbol_refcnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + In Cycle
<LI>Call Chain = _zbar_symbol_refcnt &rArr;  _zbar_symbol_refcnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_refcnt
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_refcnt
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_set_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zbar_symbol_set_ref
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_symbol_free
</UL>

<P><STRONG><a name="[152]"></a>qr_aff_line_step</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, qrdec.o(i.qr_aff_line_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = qr_aff_line_step
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_ilog
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
</UL>

<P><STRONG><a name="[154]"></a>qr_alignment_pattern_search</STRONG> (Thumb, 1862 bytes, Stack size 416 bytes, qrdec.o(i.qr_alignment_pattern_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = qr_alignment_pattern_search &rArr; qr_finder_locate_crossing
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_img_get_bit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_locate_crossing
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
</UL>

<P><STRONG><a name="[70]"></a>qr_cmp_edge_pt</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, qrdec.o(i.qr_cmp_edge_pt))
<BR>[Address Reference Count : 2]<UL><LI> qrdec.o(i.qr_finder_edge_pts_aff_classify)
<LI> qrdec.o(i.qr_finder_edge_pts_hom_classify)
</UL>
<P><STRONG><a name="[157]"></a>qr_code_data_parse</STRONG> (Thumb, 1098 bytes, Stack size 56 bytes, qrdec.o(i.qr_code_data_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = qr_code_data_parse &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_pack_buf_read
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_decode
</UL>

<P><STRONG><a name="[159]"></a>qr_code_decode</STRONG> (Thumb, 1042 bytes, Stack size 232 bytes, qrdec.o(i.qr_code_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1740<LI>Call Chain = qr_code_decode &rArr; rs_correct &rArr; rs_quartic_solve &rArr;  rs_quartic_solve (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_correct
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_sample
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_parse
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
</UL>

<P><STRONG><a name="[6f]"></a>qr_finder_center_cmp</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, qrdec.o(i.qr_finder_center_cmp))
<BR>[Address Reference Count : 1]<UL><LI> qrdec.o(i._zbar_qr_decode)
</UL>
<P><STRONG><a name="[13d]"></a>qr_finder_cluster_lines</STRONG> (Thumb, 516 bytes, Stack size 88 bytes, qrdec.o(i.qr_finder_cluster_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = qr_finder_cluster_lines &rArr; calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_qr_decode
</UL>

<P><STRONG><a name="[15d]"></a>qr_finder_edge_pts_aff_classify</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, qrdec.o(i.qr_finder_edge_pts_aff_classify))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = qr_finder_edge_pts_aff_classify &rArr; qsort &rArr;  qsort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
</UL>

<P><STRONG><a name="[15e]"></a>qr_finder_edge_pts_hom_classify</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, qrdec.o(i.qr_finder_edge_pts_hom_classify))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = qr_finder_edge_pts_hom_classify &rArr; qsort &rArr;  qsort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_unproject
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
</UL>

<P><STRONG><a name="[16d]"></a>qr_finder_estimate_module_size_and_version</STRONG> (Thumb, 434 bytes, Stack size 88 bytes, qrdec.o(i.qr_finder_estimate_module_size_and_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = qr_finder_estimate_module_size_and_version
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
</UL>

<P><STRONG><a name="[160]"></a>qr_finder_fmt_info_decode</STRONG> (Thumb, 1120 bytes, Stack size 168 bytes, qrdec.o(i.qr_finder_fmt_info_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = qr_finder_fmt_info_decode &rArr; bch15_5_correct
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_correct
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_img_get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
</UL>

<P><STRONG><a name="[156]"></a>qr_finder_locate_crossing</STRONG> (Thumb, 336 bytes, Stack size 72 bytes, qrdec.o(i.qr_finder_locate_crossing))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = qr_finder_locate_crossing
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_alignment_pattern_search
</UL>

<P><STRONG><a name="[162]"></a>qr_finder_ransac</STRONG> (Thumb, 622 bytes, Stack size 176 bytes, qrdec.o(i.qr_finder_ransac))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = qr_finder_ransac &rArr; isaac_next_uint &rArr; isaac_update
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_isqrt
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isaac_next_uint
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
</UL>

<P><STRONG><a name="[164]"></a>qr_finder_version_decode</STRONG> (Thumb, 488 bytes, Stack size 144 bytes, qrdec.o(i.qr_finder_version_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = qr_finder_version_decode &rArr; qr_img_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_img_get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
</UL>

<P><STRONG><a name="[6e]"></a>qr_finder_vline_cmp</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, qrdec.o(i.qr_finder_vline_cmp))
<BR>[Address Reference Count : 1]<UL><LI> qrdec.o(i._zbar_qr_decode)
</UL>
<P><STRONG><a name="[165]"></a>qr_hom_cell_init</STRONG> (Thumb, 2154 bytes, Stack size 200 bytes, qrdec.o(i.qr_hom_cell_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = qr_hom_cell_init
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_ilog
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
</UL>

<P><STRONG><a name="[16f]"></a>qr_hom_cell_project</STRONG> (Thumb, 180 bytes, Stack size 12 bytes, qrdec.o(i.qr_hom_cell_project))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = qr_hom_cell_project
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_init
</UL>

<P><STRONG><a name="[167]"></a>qr_hom_fit</STRONG> (Thumb, 3504 bytes, Stack size 272 bytes, qrdec.o(i.qr_hom_fit))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = qr_hom_fit &rArr; qr_alignment_pattern_search &rArr; qr_finder_locate_crossing
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_ilog
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_points
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_finder_pair
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_finder_edge
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_cell_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_ransac
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_locate_crossing
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_alignment_pattern_search
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_aff_line_step
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
</UL>

<P><STRONG><a name="[16b]"></a>qr_hom_init</STRONG> (Thumb, 1942 bytes, Stack size 168 bytes, qrdec.o(i.qr_hom_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = qr_hom_init
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_ilog
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
</UL>

<P><STRONG><a name="[15f]"></a>qr_hom_unproject</STRONG> (Thumb, 170 bytes, Stack size 12 bytes, qrdec.o(i.qr_hom_unproject))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = qr_hom_unproject
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_reader_match_centers
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_edge_pts_hom_classify
</UL>

<P><STRONG><a name="[155]"></a>qr_img_get_bit</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, qrdec.o(i.qr_img_get_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = qr_img_get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_sample
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_version_decode
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_finder_fmt_info_decode
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_alignment_pattern_search
</UL>

<P><STRONG><a name="[169]"></a>qr_line_fit_finder_edge</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, qrdec.o(i.qr_line_fit_finder_edge))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = qr_line_fit_finder_edge &rArr; qr_line_fit_points &rArr; qr_ihypot
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_points
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
</UL>

<P><STRONG><a name="[168]"></a>qr_line_fit_finder_pair</STRONG> (Thumb, 654 bytes, Stack size 128 bytes, qrdec.o(i.qr_line_fit_finder_pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = qr_line_fit_finder_pair &rArr; qr_line_fit_points &rArr; qr_ihypot
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_points
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
</UL>

<P><STRONG><a name="[16a]"></a>qr_line_fit_points</STRONG> (Thumb, 794 bytes, Stack size 96 bytes, qrdec.o(i.qr_line_fit_points))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = qr_line_fit_points &rArr; qr_ihypot
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_ilog
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_ihypot
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_finder_pair
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_line_fit_finder_edge
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_fit
</UL>

<P><STRONG><a name="[158]"></a>qr_pack_buf_read</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, qrdec.o(i.qr_pack_buf_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = qr_pack_buf_read
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_data_parse
</UL>

<P><STRONG><a name="[16e]"></a>qr_sampling_grid_fp_mask_rect</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, qrdec.o(i.qr_sampling_grid_fp_mask_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = qr_sampling_grid_fp_mask_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_init
</UL>

<P><STRONG><a name="[15a]"></a>qr_sampling_grid_init</STRONG> (Thumb, 2598 bytes, Stack size 288 bytes, qrdec.o(i.qr_sampling_grid_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = qr_sampling_grid_init &rArr; qr_alignment_pattern_search &rArr; qr_finder_locate_crossing
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_sampling_grid_fp_mask_rect
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_cell_project
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_hom_cell_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_alignment_pattern_search
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_decode
</UL>

<P><STRONG><a name="[15b]"></a>qr_sampling_grid_sample</STRONG> (Thumb, 1386 bytes, Stack size 152 bytes, qrdec.o(i.qr_sampling_grid_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = qr_sampling_grid_sample &rArr; qr_img_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_img_get_bit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qr_code_decode
</UL>

<P><STRONG><a name="[129]"></a>postprocess_c</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, code128.o(i.postprocess_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = postprocess_c &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_code128
</UL>

<P><STRONG><a name="[12b]"></a>code39_decode9</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, code39.o(i.code39_decode9))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = code39_decode9
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_code39
</UL>

<P><STRONG><a name="[125]"></a>codabar_decode_start</STRONG> (Thumb, 564 bytes, Stack size 40 bytes, codabar.o(i.codabar_decode_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = codabar_decode_start
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_codabar
</UL>

<P><STRONG><a name="[149]"></a>calc_value4</STRONG> (Thumb, 444 bytes, Stack size 36 bytes, databar.o(i.calc_value4))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = calc_value4
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_char
</UL>

<P><STRONG><a name="[147]"></a>databar_postprocess_exp</STRONG> (Thumb, 1574 bytes, Stack size 40 bytes, databar.o(i.databar_postprocess_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = databar_postprocess_exp &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode10
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_char
</UL>

<P><STRONG><a name="[148]"></a>decode10</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, databar.o(i.decode10))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = decode10
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;databar_postprocess_exp
</UL>

<P><STRONG><a name="[12e]"></a>decode_char</STRONG> (Thumb, 2292 bytes, Stack size 520 bytes, databar.o(i.decode_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = decode_char &rArr; match_segment
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_segment
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;databar_postprocess_exp
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_value4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_zbar_decode_databar
</UL>

<P><STRONG><a name="[14a]"></a>match_segment</STRONG> (Thumb, 1364 bytes, Stack size 176 bytes, databar.o(i.match_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = match_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_char
</UL>

<P><STRONG><a name="[14c]"></a>isaac_update</STRONG> (Thumb, 486 bytes, Stack size 12 bytes, isaac.o(i.isaac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = isaac_update
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isaac_next_uint
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isaac_init
</UL>

<P><STRONG><a name="[171]"></a>rs_cubic_solve</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, rs.o(i.rs_cubic_solve))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rs_cubic_solve &rArr; rs_quadratic_solve
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quadratic_solve
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quartic_solve
</UL>

<P><STRONG><a name="[172]"></a>rs_quadratic_solve</STRONG> (Thumb, 600 bytes, Stack size 44 bytes, rs.o(i.rs_quadratic_solve))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rs_quadratic_solve
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quartic_solve
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_cubic_solve
</UL>

<P><STRONG><a name="[170]"></a>rs_quartic_solve</STRONG> (Thumb, 498 bytes, Stack size 40 bytes, rs.o(i.rs_quartic_solve))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + In Cycle
<LI>Call Chain = rs_quartic_solve &rArr;  rs_quartic_solve (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quartic_solve
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quadratic_solve
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_cubic_solve
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_correct
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quartic_solve
</UL>

<P><STRONG><a name="[11e]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf$8
</UL>

<P><STRONG><a name="[123]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[122]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL>
<P><STRONG><a name="[121]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
